//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Algolia.Search.Models;

namespace Algolia.Search.Ingestion.Models
{
  /// <summary>
  /// The input for a &#x60;schedule&#x60; task whose source is of type &#x60;bigquery&#x60; and for which extracted data spans a fixed number of days.
  /// </summary>
  [DataContract(Name = "ScheduleDateUtilsInput")]
  public partial class ScheduleDateUtilsInput : IEquatable<ScheduleDateUtilsInput>
  {
    /// <summary>
    /// Initializes a new instance of the <see cref="ScheduleDateUtilsInput" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected ScheduleDateUtilsInput() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="ScheduleDateUtilsInput" /> class.
    /// </summary>
    /// <param name="timeframe">The timeframe of the extraction, in number of days from today. (required).</param>
    public ScheduleDateUtilsInput(int timeframe = default(int))
    {
      this.Timeframe = timeframe;
    }

    /// <summary>
    /// The timeframe of the extraction, in number of days from today.
    /// </summary>
    /// <value>The timeframe of the extraction, in number of days from today.</value>
    [DataMember(Name = "timeframe", IsRequired = true, EmitDefaultValue = true)]
    public int Timeframe { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
      StringBuilder sb = new StringBuilder();
      sb.Append("class ScheduleDateUtilsInput {\n");
      sb.Append("  Timeframe: ").Append(Timeframe).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
      return this.Equals(input as ScheduleDateUtilsInput);
    }

    /// <summary>
    /// Returns true if ScheduleDateUtilsInput instances are equal
    /// </summary>
    /// <param name="input">Instance of ScheduleDateUtilsInput to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(ScheduleDateUtilsInput input)
    {
      if (input == null)
      {
        return false;
      }
      return
          (
              this.Timeframe == input.Timeframe ||
              this.Timeframe.Equals(input.Timeframe)
          );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
      unchecked // Overflow is fine, just wrap
      {
        int hashCode = 41;
        hashCode = (hashCode * 59) + this.Timeframe.GetHashCode();
        return hashCode;
      }
    }

  }

}
